1.What is Python? What are the benefits of using Python
General purpose programming lanugage
Easy to use
Can be easily learned
It has huge community support
Offers multiple library for machine learning, big data processing, web development framework like flask, django

2. What is a dynamically typed language?
Static - Data Types are checked before execution.
Dynamic - Data Types are checked during execution.
Python is an interpreted language, executes each statement line by line and thus type-checking is done on the fly, during execution.
Hence, Python is a Dynamically Typed Language.

3. 3. What is an Interpreted language?
An Interpreted language executes its statements line by line.
Languages such as Python, Javascript, R, PHP, and Ruby are prime examples of Interpreted languages. 
Programs written in an interpreted language runs directly from the source code, with no intermediary compilation step.

4. What is PEP 8 and why is it important?
PEP stands for Python Enhancement Proposal. 
A PEP is an official design document providing information to the Python community, or describing a new feature for Python or its processes.



5.  What is Scope in Python?
A local scope refers to the local objects available in the current function.
A global scope refers to the objects available throughout the code execution since their inception.
A module-level scope refers to the global objects of the current module accessible in the program.
An outermost scope refers to all the built-in names callable in the program. The objects in this scope are searched last to find the name referenced.
Note: Local scope objects can be synced with global scope objects using keywords such as global

6. What are lists and tuples? What is the key difference between the two?
Lists and Tuples are both sequence data types that can store a collection of objects in Python.
The objects stored in both sequences can have different data types.
Lists are represented with square brackets ['sara', 6, 0.19], while tuples are represented with parantheses ('ansh', 5, 0.97).
But what is the real difference between the two? The key difference between the two is that while lists are mutable, tuples on the other hand are immutable objects.
This means that lists can be modified, appended or sliced on the go but tuples remain constant and cannot be modified in any manner.


7. What are the common built-in data types in Python?
None Type: Null type in Python
Numeric Types: integers, floating-point numbers, and complex numbers
Sequence Types:list	Mutable sequence used to store collection of items.
tuple	Immutable sequence used to store collection of items.
range	Represents an immutable sequence of numbers generated during execution.
str	Immutable sequence of Unicode code points to store textual data.

Mapping Types:dict	Stores comma-separated list of key: value pairs
Set Types:set	Mutable unordered collection of distinct hashable objects.
frozenset	Immutable collection of distinct hashable objects.

Modules:
Module is an additional built-in type supported by the Python Interpreter.
It supports one special operation, 
i.e., attribute access: mymod.myobj, where mymod is a module and myobj references a name

Callable Types:
Callable types are the types to which function call can be applied. 
They can be user-defined functions, instance methods, generator functions, and some other built-in functions, methods and classes.

8. What is pass in Python?
the pass keyword represents a null operation in Python.
It is generally used for the purpose of filling up empty blocks

9. What are modules and packages in Python?
Modules typically have a .py extension.
Examples of modules include math.py, random.py, and datetime.py.

Packages:
A package is a collection of Python modules organized in directories.
Packages contain a special file named __init__.py, which indicates that the directory should be treated as a Python package.

10.  What are global, protected and private attributes in Python?
Global variables are public variables that are defined in the global scope. To use the variable in the global scope inside a function, we use the global keyword.

Protected attributes are attributes defined with an underscore prefixed to their identifier eg. _sara. 
They can still be accessed and modified from outside the class they are defined in but a responsible developer should refrain from doing so.
Private attributes are attributes with double underscore prefixed to their identifier eg. __ansh.
They cannot be accessed or modified from the outside directly and will result in an AttributeError if such an attempt is made

11. What is the use of self in Python?
Self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python

12. What is __init__?
__init__ is a contructor method in Pytho
# class definition
class Student:
   def __init__(self, fname, lname, age, section):
       self.firstname = fname
       self.lastname = lname
       self.age = age
       self.section = section
# creating a new object
stu1 = Student("Sara", "Ansh", 22, "A2")

12. How is memory managed in Python?
python memory manager and it has private area called heap space, which is free space. Object are stored in this heap. It has gc, if object's allocation -deallocation crosses 
threshold , then gc runs and it removes the object. Also gc can be triggered by programmer based on schedule(run every 15 minute) or event(logging)

13. What are Python namespaces? Why are they used?
A namespace in Python ensures that object names in a program are unique and can be used without any conflict.
Local Namespace includes local names inside a function. the namespace is temporarily created for a function call and gets cleared when the function returns.
Global Namespace includes names from various imported packages/ modules that are being used in the current project. 
This namespace is created when the package is imported in the script and lasts until the execution of the script.
Built-in Namespace includes built-in functions of core Python and built-in names for various types of exceptions.

14.  What is Scope Resolution in Python?
Python modules namely 'math' and 'cmath' have a lot of functions that are common to both of them - log10(), acos(), exp() etc. To resolve this ambiguity,
it is necessary to prefix them with their respective module, like math.exp() and cmath.exp().
temp = 10   # global-scope variable
def func():
     temp = 20   # local-scope variable
     print(temp)
print(temp)   # output => 10
func()    # output => 20
print(temp)   # output => 10

15  What are decorators in Python?
decorator is function which takes another function as argument.add functionality to existing function. 
def lowercase_decorator(function):
   def wrapper():
       func = function()
       string_lowercase = func.lower()
       return string_lowercase
   return wrapper
def hello():
   return 'Hello World'
hello()  

16.  What are Dict and List comprehensions?
my_list = [2, 3, 5, 7, 11]
squared_list = [x**2 for x in my_list if x%2 != 0]    # list comprehension
# output => [9 , 25 , 49 , 121]
squared_dict = {x:x**2 for x in my_list if x%2 != 0}    # dict comprehension
# output => {11: 121, 3: 9 , 5: 25 , 7: 49}
Combining multiple lists into one
Comprehensions allow for multiple iterators and hence, can be used to combine multiple lists into one. 
a = [1, 2, 3]
b = [7, 8, 9]
[(x + y) for (x,y) in zip(a,b)]  # parallel iterators
# output => [8, 10, 12]
[(x,y) for x in a for y in b]    # nested iterators
# output => [(1, 7), (1, 8), (1, 9), (2, 7), (2, 8), (2, 9), (3, 7), (3, 8), (3, 9)] 

Flattening a multi-dimensional list
my_list = [[10,20,30],[40,50,60],[70,80,90]]
flattened = [x for temp in my_list for x in temp]

17. What is lambda in Python? Why is it used?
Lambda is an anonymous function in Python, that can accept any number of arguments, but can only have a single expression. 
mul = lambda a, b : a * b
print(mul(2, 5))    # output => 10
Wrapping lambda functions inside another function:
def myWrapper(n):
 return lambda a : a * n
mulFive = myWrapper(5)
print(mulFive(2))    # output => 10

18. How do you copy an object in Python?
In Python, the assignment statement (= operator) does not copy objects. 
Instead, it creates a binding between the existing object and the target variable name.
Shallow Copy is a bit-wise copy of an object. The copied object created has an exact copy of the values in the original object.
If either of the values is a reference to other objects,
just the reference addresses for the same are copied.

Deep Copy copies all values recursively from source to target object, i.e. 
it even duplicates the objects referenced by the source object.
from copy import copy, deepcopy
list_1 = [1, 2, [3, 5], 4]
## shallow copy
list_2 = copy(list_1) 
list_2[3] = 7
list_2[2].append(6)
list_2    # output => [1, 2, [3, 5, 6], 7]
list_1    # output => [1, 2, [3, 5, 6], 4]
## deep copy
list_3 = deepcopy(list_1)
list_3[3] = 8
list_3[2].append(7)
list_3    # output => [1, 2, [3, 5, 6, 7], 8]
list_1    # output => [1, 2, [3, 5, 6], 4]

19 What is the difference between xrange and range in Python?
Note: xrange has been deprecated as of Python 3.x. Now range does exactly the same as what xrange used to do in Python 2.x,
since it was way better to use xrange() than the original range() function in Python 2.x
20. What is pickling and unpickling?
Pickling is the name of the serialization process in Python.
Any object in Python can be serialized into a byte stream and dumped as a file in the memory.
The function used for the above process is pickle.dump().

Unpickling is the complete inverse of pickling.
It deserializes the byte stream to recreate the objects stored in the file and loads the object to memory.

21. What are generators ? 
Generator are similar to function but they use yied keyword instead of return. They return iterables which is collection of objects.
They return items one at time.
def fib(n):
   p, q = 0, 1
   while(p < n):
       yield p
       p, q = q, p + q
x = fib(10) 

def range_function(n):
    x=0
    while(x<n):
        yield x
        x=x+1
for i in range_function(10):
    print(i)

22.  What is the use of help() and dir() functions?
>>> import math
>>> dir(math)
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'cbrt', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'exp2', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi',
'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'sumprod', 'tan', 'tanh', 'tau', 'trunc', 'ulp']
>>> help(math)
Help on built-in module math:                                                                                                                      
NAME
    math
DESCRIPTION
    This module provides access to the mathematical functions
    defined by the C standard.
FUNCTIONS
    acos(x, /)
        Return the arc cosine (measured in radians) of x.
        The result is between 0 and pi.
    acosh(x, /)
        Return the inverse hyperbolic cosine of x.

23. How python code is interpreted?
Lexical Analysis:
The Python interpreter first performs lexical analysis, where it breaks down the source code into a sequence of tokens.
Parsing:
After lexical analysis, the interpreter parses the tokens into a parse tree or abstract syntax tree (AST).

Intermediate Code Generation (optional):
Some Python implementations, like CPython (the default and most widely used implementation), generate intermediate bytecode from the parse tree. 
This bytecode is a low-level representation of the Python code and is executed by the Python Virtual Machine (PVM).

Bytecode Execution:
The bytecode is executed by the Python Virtual Machine. 
The PVM translates the bytecode into machine code and executes it on the underlying hardware.

24. What are iterators in Python?

An iterator is an object.
It remembers its state i.e., where it is during iteration (see code below to see how)
__iter__() method initializes an iterator.
It has a __next__() method which returns the next item in iteration and points to the next element. 
Upon reaching the end of iterable object __next__() must return StopIteration exception.
It is also self-iterable.
Iterators are objects with which we can iterate over iterable objects like lists, strings, etc.
class ArrayList:
   def __init__(self, number_list):
       self.numbers = number_list
   def __iter__(self):
       self.pos = 0
       return self
   def __next__(self):
       if(self.pos < len(self.numbers)):
           self.pos += 1
           return self.numbers[self.pos - 1]
       else:
           raise StopIteration
array_obj = ArrayList([1, 2, 3])
it = iter(array_obj)
print(next(it)) #output: 2
print(next(it)) #output: 3
print(next(it))

class MyIterator:
    def __init__(self, max_value):
        self.max_value = max_value
        self.current = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.current < self.max_value:
            self.current += 1
            return self.current
        else:
            raise StopIteration

# Using the custom iterator
iterator = MyIterator(5)
for value in iterator:
    print(value)


25.  Explain how to delete a file in Python?
import os
os.remove("ChangedFile.csv")
print("File Removed!")

26. Explain split() and join() functions in Python?
string = "This is a string."
string_list = string.split(' ') #delimiter is ‘space’ character or ‘ ‘
print(string_list) #output: ['This', 'is', 'a', 'string.']
print(' '.join(string_list)) #output: This is a string.

27. What does *args and **kwargs mean?
argv--> will be tuple

def multiply(a, b, *argv):
   mul = a * b
   for num in argv:
       mul *= num
   return mul
print(multiply(1, 2, 3, 4, 5))

def tellArguments(**kwargs):
   for key, value in kwargs.items():
       print(key + ": " + value)
tellArguments(arg1 = "argument 1", arg2 = "argument 2", arg3 = "argument 3")

28 What are negative indexes and why are they used?
Negative indexes are the indexes from the end of the list or tuple or string.
arr = [1, 2, 3, 4, 5, 6]
#get the last element
print(arr[-1]) #output 6
#get the second last element
print(arr[-2]) #output 5

29 .  Difference between tuple and list.
tuple is immutable object list is mutable
iteration is fast is tuple
less memory consumption in tuple
since array we can add element then its size is more .

some of the operation not supported by tuple
-->append
--> remove
--> extend
-->insert
An object is hashable if it has a hash value which never changes during its lifetime .
Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.
Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries) are not; immutable containers 
(such as tuples and frozensets) are only hashable if their elements are hashable. 

30. In terms of efficiency why are tuples better?
Since it is non-mutable, elements cant grow beyond a fixed size, hence memory allocation doesn’t
31. Write a simple list and tuple variable.
A] mylist=[1,2,3,4]
B] myt1=(mylist,1)
32] Here, in point 3], B] point, can we perform append operation,remove operation i.e mutable
operations to index[0]?
A] Yes its possible, because it tuple holds mutable containers such as list and dictionary then it become unhasable. 

33)  Write a decorator which doesn’t affect the return function of parent module.
A] eg:- mention/write code with @classmethod or @staticmethod since those doesn’t affect the
return type of a method.
def decor(f):
    def inner(x,y):
        res=f(x,y)
        return res
    return inner
@decor
def add(x,y):
    return x+y        
r=add(10,20)
print(r)

1. How do you create a class in Python?
class InterviewbitEmployee:
   def __init__(self, emp_name):
       self.emp_name = emp_name

2. How does inheritance work in python? Explain it with an example.
Inheritance gives the power to a class to access all attributes and methods of another class
It aids in code reusability and helps the developer to maintain applications without redundant code. 
The class inheriting from another class is a child class or also called a derived class. 
The class from which a child class derives the members are called parent class or superclass.

Python supports different kinds of inheritance, they are:
Single Inheritance: Child class derives members of one parent class. A-->B
class ParentClass:
    def par_func(self):
         print("I am parent class function")

# Child class
class ChildClass(ParentClass):
    def child_func(self):
         print("I am child class function")

# Driver code
obj1 = ChildClass()
obj1.par_func()
obj1.child_func()


Multi-level Inheritance: A-->B-->C
# Parent class
class A:
   def __init__(self, a_name):
       self.a_name = a_name
   
# Intermediate class
class B(A):
   def __init__(self, b_name, a_name):
       self.b_name = b_name
       # invoke constructor of class A
       A.__init__(self, a_name)

# Child class
class C(B):
   def __init__(self,c_name, b_name, a_name):
       self.c_name = c_name
       # invoke constructor of class B
       B.__init__(self, b_name, a_name)
       
   def display_names(self):
       print("A name : ", self.a_name)
       print("B name : ", self.b_name)
       print("C name : ", self.c_name)

#  Driver code
obj1 = C('child', 'intermediate', 'parent')
print(obj1.a_name)
obj1.display_names()

Multiple Inheritance:   A-->c<---B  C will derive from Both A and B
# Parent class1
class Parent1:
   def parent1_func(self):
       print("Hi I am first Parent")

# Parent class2
class Parent2:
   def parent2_func(self):
       print("Hi I am second Parent")

# Child class
class Child(Parent1, Parent2):
   def child_func(self):
       self.parent1_func()
       self.parent2_func()

# Driver's code
obj1 = Child()
obj1.child_func()

-->Hierarchical Inheritance: When a parent class is derived by more than one child class, it is called hierarchical inheritance.
# Base class
class A:
     def a_func(self):
         print("I am from the parent class.")

# 1st Derived class
class B(A):
     def b_func(self):
         print("I am from the first child.")

# 2nd Derived class
class C(A):
     def c_func(self):
         print("I am from the second child.")
 
# Driver's code
obj1 = B()
obj2 = C()
obj1.a_func()
obj1.b_func()    #child 1 method
obj2.a_func()
obj2.c_func()    #child 2 meth

3. How do you access parent members in the child class?
By using Parent class name: You can use the name of the parent class to access the attributes as shown in the example below:
class Parent(object):  
   # Constructor
   def __init__(self, name):
       self.name = name    
 
class Child(Parent): 
   # Constructor
   def __init__(self, name, age):
       Parent.name = name
       self.age = age
 
   def display(self):
       print(Parent.name, self.age)
 
# Driver Code
obj = Child("Interviewbit", 6)
obj.display()
By using super(): The parent class members can be accessed in child class using the super keyword.
class Parent(object):
   # Constructor
   def __init__(self, name):
       self.name = name    
 
class Child(Parent):
   # Constructor
   def __init__(self, name, age):         
       ''' 
       In Python 3.x, we can also use super().__init__(name)
       ''' 
       super(Child, self).__init__(name)
       self.age = age
 
   def display(self):
      # Note that Parent.name cant be used 
      # here since super() is used in the constructor
      print(self.name, self.age)
  
# Driver Code
obj = Child("Interviewbit", 6)
obj.display()

4. Are access specifiers used in python?
# to demonstrate access specifiers
class InterviewbitEmployee:
   
    # protected members
    _emp_name = None
    _age = None
    
    # private members
    __branch = None
    
    # constructor
    def __init__(self, emp_name, age, branch): 
         self._emp_name = emp_name
         self._age = age
         self.__branch = branch
    
    #public member
    def display():
        print(self._emp_name +" "+self._age+" "+self.__branch)

5. Differentiate between new and override modifiers.
The new modifier is used to instruct the compiler to use the new implementation and not the base class function. 
The Override modifier is useful for overriding a base class function inside the child class.

6.  How will you check if a class is a child of another class?
This is done by using a method called issubclass() provided by python.
The method tells us if any class is a child of another class by returning true or false accordingly.

7. What is the purpose of the @property decorator?
In Python, the property decorator is a built-in function used to define properties of a class. 
It allows you to define methods that act like attributes,
providing control over how attributes are accessed, assigned, and deleted
class Circle:
    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        if value <= 0:
            raise ValueError("Radius must be positive")
        self._radius = value

    @radius.deleter
    def radius(self):
        del self._radius

# Usage
c = Circle(5)
print(c.radius)  # Output: 5
c.radius = 7
print(c.radius)  # Output: 7
del c.radius
# Raises AttributeError: 'Circle' object has no attribute '_radius'

8. What is a static method and how is it different from a class method?
A static method in Python belongs to a class rather than an instance of the class.
You can define it using the @staticmethod decorator. It doesn’t require reference to the class or its instance and can be called on the class itself.
Unlike regular instance methods, it doesn’t take a self parameter. 


A static method in Python is a method that is bound to a class rather than an instance of the class. This means you can call a static method without creating an instance of the class. Static methods are defined using the @staticmethod decorator.

Here's a simple example to illustrate how static methods are used:

python
Copy code
class MathOperations:
    @staticmethod
    def add(x, y):
        return x + y
    
    @staticmethod
    def subtract(x, y):
        return x - y

# Usage
print(MathOperations.add(5, 3))  # Output: 8
print(MathOperations.subtract(5, 3))  # Output: 2


9.  How can you prevent method overriding in Python?
Pefixing the method’s name with a double underscore (__), 
you make it private to the class, and it cannot be overridden in a subclass. 

10. How does polymorphism work in Python?
Method Overriding:
Operator Overloading

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)

# Usage
p1 = Point(1, 2)
p2 = Point(3, 4)
p3 = p1 + p2
print(f"({p3.x}, {p3.y})")  # Output: (4, 6)

11 . Does Python supports method overloading??
Python does not support method overloading in the traditional sense as some other languages like Java or C++ do, 
where you can define multiple methods with the same name but with different parameter lists.

In Python, you can define a function or method with a single name, and if you try to define another function or method with the same name in the same scope,
the newer definition will override the previous one.


However, Python provides a way to simulate method overloading using default 
parameter values and variable-length argument lists.
class MathOperations:
    def add(self, x, y=None):
        if y is None:
            return x
        else:
            return x + y

# Usage
math_ops = MathOperations()
print(math_ops.add(2, 3))  # Output: 5
print(math_ops.add(2))      # Output: 2
In this example, the add() method can accept one or two arguments.
If only one argument is passed, it returns that argument. If two arguments are passed,
it returns the sum of the two arguments. This is a way to achieve method overloading-like behavior in Python, 
although it's not exactly the same as method overloading in languages like Java or C++.

12. Explain inheritance, super and __str__ using one program.
class MsmObject(object):
    """ Class that SmartFabric objects with odata paths inherit from

    All classes mirroring SmartFabric objects inherit this class
    """

    def __init__(self, odata_id=None, odata_type=None, *args, **kwargs):
        self.odata_id = odata_id
        self.odata_type = odata_type
        
class Network(MsmObject):
    """ Class that mirrors SmartFabric network profile.

    Network Profile Object
    Used for adding vlans to Server Profile Interfaces
    Takes a range for Vlans (VlanMinimum - VlanMaximum)
    """

    def __init__(self, odata_id=None, Id=None, VlanMaximum=None,
                 VlanMinimum=None, Name=None, Description=None,
                 Type=None, CreatedBy=None, CreationTime=None,
                 UpdatedBy=None, UpdatedTime=None, InternalRefNWUUId=None,
                 *args, **kwargs):
        """
        :param: odata_id: unique URL associated with this object
        :param: NetworkId: unique ID for this object
        :param: VlanMaximum: vlan range maximum value
        :param: VlanMinimum: vlan range minimum value
        :param: QosPriority:
        :param: NetworkType:
        :param: NetworkName: name assigned to the network profile
        :param: Description: String describing the network profile
        """
        super(Network, self).__init__(odata_id)
        self.Id = Id
        self.VlanMaximum = VlanMaximum
        self.VlanMinimum = VlanMinimum
        self.Name = Name
        self.Description = Description
        self.Type = Type
        self.CreatedBy = CreatedBy
        self.CreationTime = CreationTime
        self.UpdatedBy = UpdatedBy
        self.UpdatedTime = UpdatedTime
        self.InternalRefNWUUId = InternalRefNWUUId
        
    def __str__(self):
        return str(self.Id)
        
nw=Network("x",1)
print(nw.odata_id)
print(nw)

13. What is abstract class and abstarct method in python?
from abc import ABC, abstractmethod


class Polygon(ABC):

    @abstractmethod
    def noofsides(self):
        pass


class Triangle(Polygon):

    # overriding abstract method
    def noofsides(self):
        print("I have 3 sides")


class Pentagon(Polygon):

    # overriding abstract method
    def noofsides(self):
        print("I have 5 sides")


class Hexagon(Polygon):

    # overriding abstract method
    def noofsides(self):
        print("I have 6 sides")


class Quadrilateral(Polygon):

    # overriding abstract method
    def noofsides(self):
        print("I have 4 sides")


# Driver code
R = Triangle()
R.noofsides()

K = Quadrilateral()
K.noofsides()

R = Pentagon()
R.noofsides()

K = Hexagon()
K.noofsides()

====
class BackupInterface(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (hasattr(subclass, 'list_backups') and
                callable(subclass.list_backups) and
                hasattr(subclass, 'get_backup_from_repo') and
                callable(subclass.get_backup_from_repo) and
                hasattr(subclass, 'copy_backup_file_to_repo') and
                callable(subclass.copy_backup_file_to_repo) and
                hasattr(subclass, 'delete') and
                callable(subclass.delete) and
                NotImplemented)







